from datetime import datetime

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.config import db, ADMIN_IDS
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.commands import Commands
from tgbot.misc.keyboards import mainMenu, cancel_inline, become_driver_inline
from tgbot.misc.states import FeedbackState


async def user_start(message: Message):
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name, datetime.now())
        for admin in ADMIN_IDS:
            await message.bot.send_message(admin, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"
                                                  f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, <b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}] —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ.")
        await message.bot.send_message(message.from_user.id,
                                       text=f'<b>{message.from_user.first_name}</b>, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '
                                            f'–¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢.–†–§ üöï\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞–∫–∞–∑ –Ω–∞ –≤–∞—à—É –ø–æ–µ–∑–¥–∫—É',
                                       reply_markup=mainMenu)
    else:
        await message.bot.send_message(message.from_user.id,
                                       text=f'<b>{message.from_user.first_name}</b>, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '
                                            f'–¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢.–†–§ üöï\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞–∫–∞–∑ –Ω–∞ –≤–∞—à—É –ø–æ–µ–∑–¥–∫—É',
                                       reply_markup=mainMenu)


async def cancel_button(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(call.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def rates(message: Message):
    photo_url = 'https://xn----7sbp3acjidhfbkt.xn--p1ai/tarif.jpg'
    await message.bot.send_photo(message.from_user.id, photo=photo_url)


async def become_driver(message: Message):
    text = (
        "–ù–∞–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –ò–∂–µ–≤—Å–∫–∞, –ö–∞–∑–∞–Ω–∏ –£—Ñ—ã, –°–∞–º–∞—Ä—ã, –ü–µ—Ä–º–∏, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–µ–º "
        "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–æ–º —Ç–∞–∫—Å–∏ –Ω–∞ –ª–∏—á–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö."
        "\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:"
        "\n ‚Ä¢ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
        "\n ‚Ä¢ –∏–Ω–æ–º–∞—Ä–∫–∞ –ª–∏–±–æ –º–∏–Ω–∏–º—É–º –õ–ê–î–ê –í–ï–°–¢–ê"
        "\n ‚Ä¢ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –Ω–µ —Å—Ç–∞—Ä—à–µ 8 –ª–µ—Ç"
        "\n ‚Ä¢ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞"
        "\n ‚Ä¢ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏—Ö –ø–æ–µ–∑–¥–∫–∞—Ö"
        "\n ‚Ä¢ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ –û—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –≥–¥–µ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º"
    )
    await message.bot.send_message(message.from_user.id, text, reply_markup=become_driver_inline)


async def user_feedback(message: Message):
    await message.bot.send_message(message.from_user.id,
                                   "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–ª–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–µ–º: ",
                                   reply_markup=cancel_inline)
    await FeedbackState.waiting_for_message.set()


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_callback_query_handler(
        cancel_button, IsBanFilter(), text="cancelbutton", state='*'
    )
    dp.register_message_handler(
        rates, IsBanFilter(),
        text=Commands.rates.value,
        state='*'
    )
    dp.register_message_handler(
        become_driver, IsBanFilter(),
        text=Commands.become_driver.value,
        state='*'
    )
    dp.register_message_handler(
        user_feedback, IsBanFilter(), text=Commands.feedback.value,
        state="*"
    )